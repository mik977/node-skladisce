{
  "name": "node-firebird",
  "version": "0.1.1",
  "description": "Firebird client - pure javascript",
  "keywords": [
    "firebird",
    "database",
    "rdbms"
  ],
  "homepage": "http://github.com/hgourvest/node-firebird",
  "repository": {
    "type": "git",
    "url": "git://github.com/hgourvest/node-firebird"
  },
  "author": {
    "name": "Henri Gourvest",
    "email": "hgourvest@gmail.com"
  },
  "main": "./lib",
  "readme": "# node-firebird\n\nPure javascript and asynchronous Firebird client for Node.js.\n\nIf you are new to Firebird you will find useful documentation [here] [1].\n\n## Install\n\n\tnpm install node-firebird\n\n## Examples\n\n### Connecting\n\n\tfb = require(\"node-firebird\");\n\tfb.attach(\n\t    {\n\t        host: '127.0.0.1',\n\t        database: 'database.fdb',\n\t        user: 'SYSDBA',\n\t        password: 'masterkey'\n\t    },\n\t\tfunction(err, db){\n            if (err) {\n                console.log(err.message);\n            } else {\n                database = db;\n            \tconsole.log(\"connected\");\n            }\n\t\t}\n\t);\n\n### Querying\n\n#### Simple query\n\n\tdatabase.query(\"select cast(? as integer) from rdb$database\", 123,\n\t\tfunction (err, result) {\n\t\t\tconsole.log(result)\n\t\t}\n\t);\n\nThe transaction automatically started, commited or rollbacked.\n\n- query is a non optional string.\n- params is optional, can be a single value or an array.\n- callback is optional.\n\n\n### Using transaction\n\n    function checkError(err) {\n        if (err) {\n            throw new Error(err.message)\n        }\n    }\n    function check(tr, callback){\n        return function(err, param) {\n            if (!err) {\n                callback(err, param);\n            } else {\n                tr.rollback();\n                throw new Error(err.message)\n            }\n        }\n    }\n\n    database.startTransaction(\n        function(err, transaction) {\n            checkError(err);\n            transaction.query(\"select cast(? as integer) from rdb$database\", 123,\n                check(transaction, function(err, result1) {\n                    transaction.query(\"select cast(? as integer) from rdb$database\", 456,\n                        check(transaction, function(err, result2) {\n                            transaction.commit(\n                                function(err) {\n                                    checkError(err);\n                                    console.log(result1[0]);\n                                    console.log(result2[0]);\n                                }\n                            )\n                        })\n                    );\n                })\n            );\n        }\n    )\n\n### Arrays or Objects ?\n\nThe common usage is to fetch records as objects\n\n    database.query(...)\n\nYou can also fetch records as arrays\n\n    database.execute(...)\n\nIn this case you can retrieve fields name in the callback\n\n    function(err, rows, fields){...}\n\nYou can do the same on transactions.\n\n### Errors handling\n\nThis is a typical error object:\n\n    {\n    \tstatus: [\n    \t\t{gdscode: 335544569},                   // Dynamic SQL Error\n    \t\t{gdscode: 335544436, params: [-104]},   // SQL error code = -104\n    \t\t{gdscode: 335544634, params: [1,31]},   // Token unknown - line 1, column 31\n    \t\t{gdscode: 335544382, params: [\"m\"]}     // m\n    \t],\n    \tsqlcode: -104,\n    \tmessage: \"Dynamic SQL Error, SQL error code = -104, Token unknown - line 1, column 31, m\"\n    }\n\n- The first gdscode value is the most significant error.\n- The sqlcode value is extracted from status vector.\n- The message string is built using firebrd.msg file.\n\n  [1]: http://www.firebirdsql.org/en/documentation/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hgourvest/node-firebird/issues"
  },
  "_id": "node-firebird@0.1.1",
  "dist": {
    "shasum": "5c1febceb286d4daf59f5911c9e417e4763fcf92"
  },
  "_from": "node-firebird@",
  "_resolved": "https://registry.npmjs.org/node-firebird/-/node-firebird-0.1.1.tgz"
}
